e = [1, 2, 3, 4, 5]
e.append(6)  # 리스트에 데이터 추가하기
print(e)  # [1, 2, 3, 4, 5, 6]
del e[1]  # 리스트에서 데이터 삭제하기
print(e)  # [1, 3, 4, 5, 6]
e[0] = 10  # 리스트에서 데이터 수정하기
print(e)  # [10, 3, 4, 5, 6]

print("-" * 60)

# 4의 개수를 세는 방법
a = [1, 2, 3, 4, 4, 5, 4, 6, 4]
print(f"숫자 1은 {a.count(1)}개 있습니다.")  # 1의 개수 세기
print(f"숫자 2는 {a.count(2)}개 있습니다.")  # 2의 개수 세기
print(f"숫자 3은 {a.count(3)}개 있습니다.")  # 3의 개수 세기
print(f"숫자 4는 {a.count(4)}개 있습니다.")  # 4의 개수 세기
print(f"숫자 5는 {a.count(5)}개 있습니다.")  # 5의 개수 세기
print(f"숫자 6은 {a.count(6)}개 있습니다.")  # 6의 개수 세기


b = [2, 4, 1, 3, 5]
print(b.sort())  # None
print(b)

print("-" * 60)

# 리스트 형변환
# strData = "Hello world"

c = [
    1,
    2,
    3,
    4,
    5,
]  # 리스트 ; 리스트는 데이터의 집합체로, 여러 개의 데이터를 저장할 수 있는 자료형이다.
d = (
    1,
    2,
    3,
    4,
    5,
)  # 튜플 ; 튜플은 리스트와 비슷하지만, 수정이 불가능하다. 보호된 데이터로, 데이터의 변경이 불가능하다.
# 튜플은 리스트보다 속도가 빠르다. (리스트는 데이터의 추가, 삭제, 수정이 가능하지만, 튜플은 불가능하다.)
# 튜플은 ()로 묶고, 리스트는 []로 묶는다.

print(c)  # [1, 2, 3, 4, 5]
print(d)  # (1, 2, 3, 4, 5)

print("-" * 60)

# 딕셔너리 : dic
# Key : Value 쌍으로 이루어진 데이터 구조
# ['홍길동', 20, 010-1234-5678, 'gildong@hotmail.com']
# => {'이름': '홍길동', '나이': 20, '전화번호': '010-1234-5678', '이메일': '}

dic1 = {"이름": "홍길동", "나이": 20, "전화번호": "010-1234-5678", "이메일": ""}

print(dic1)  # {'이름': '홍길동', '나이': 20, '전화번호': '010-1234-5678', '이메일': ''}
print(dic1["이름"])  # 홍길동

# 딕셔너리가 곧 API다.
# API Document를 보면, Key와 Value가 있다.
# 대충은 알아야한다.

print(dic1.keys())  # 라벨같은건 키값이다.
print(dic1.values())  # 실제 수치는 밸류값이다.
print(dic1.items())  # 튜플의 형태로 키와 밸류를 쌍으로 묶어준다.

print("-" * 60)

# 반복문 : while, for
# while : 조건이 참인 동안 반복한다.
# for : 리스트, 튜플, 딕셔너리 등의 자료형을 순회하면서 반복한다.
